/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersUsersRouteImport } from './routes/_users/users'
import { Route as UsersUsersIndexRouteImport } from './routes/_users/users/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUsersRoute = UsersUsersRouteImport.update({
  id: '/_users/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUsersIndexRoute = UsersUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersUsersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users': typeof UsersUsersRouteWithChildren
  '/users/': typeof UsersUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/users': typeof UsersUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_users/users': typeof UsersUsersRouteWithChildren
  '/_users/users/': typeof UsersUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/users' | '/users/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/users'
  id: '__root__' | '/' | '/_users/users' | '/_users/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsersUsersRoute: typeof UsersUsersRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_users/users': {
      id: '/_users/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_users/users/': {
      id: '/_users/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersUsersIndexRouteImport
      parentRoute: typeof UsersUsersRoute
    }
  }
}

interface UsersUsersRouteChildren {
  UsersUsersIndexRoute: typeof UsersUsersIndexRoute
}

const UsersUsersRouteChildren: UsersUsersRouteChildren = {
  UsersUsersIndexRoute: UsersUsersIndexRoute,
}

const UsersUsersRouteWithChildren = UsersUsersRoute._addFileChildren(
  UsersUsersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersUsersRoute: UsersUsersRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
